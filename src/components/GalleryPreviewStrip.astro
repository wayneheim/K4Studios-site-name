---
interface Props {
  images: {
    id: string;
    title?: string;
    alt?: string;
    src: string;
    visibility?: string;
  }[];
  path: string;
  limit?: number;
}

const { images, path, limit = 6 } = Astro.props;

// ensure we point at the actual gallery folder ending in /Gallery
const galleryBase = path.endsWith('/Gallery') ? path : `${path}/Gallery`;

function shuffle<T>(arr: T[]): T[] {
  return arr
    .map(value => ({ value, sort: Math.random() }))
    .sort((a, b) => a.sort - b.sort)
    .map(({ value }) => value);
}

const visibleImages = shuffle(
  images.filter(img => img.visibility !== "ghost")
).slice(0, limit);

const middleIndex = Math.floor(visibleImages.length / 2);
---

<section class="gallery-preview-strip" aria-label="Gallery preview strip">
  <div class="gallery-label-frame">
    <span class="gallery-hr gallery-hr-left" />
    <span class="gallery-label">Gallery Preview</span>
    <span class="gallery-hr gallery-hr-right" />
  </div>

  <div class="gallery-strip">
    {visibleImages.map((img, index) => {
      const offset = index - middleIndex;
      const delay = Math.abs(offset) * 100 + 400;
      const direction = offset === 0 ? "center" : offset < 0 ? "left" : "right";
      return (
        <a
          href={`${galleryBase}/${img.id}`}
          class={`gallery-thumb anim-${direction}`}
          title={img.title ?? img.alt ?? "Gallery image"}
          style={`animation-delay: ${delay}ms`}
        >
          <img
            src={img.src}
            alt={img.alt ?? img.title ?? "Gallery image"}
            loading="lazy"
          />
        </a>
      );
    })}
  </div>
</section>

<style>
  .gallery-preview-strip {
    margin-top: 2.5rem;
    padding: 1rem 0;
    opacity: 0;
    animation: fadeStripIn 0.4s ease forwards;
    animation-delay: 850ms;
  }

  @keyframes fadeStripIn {
    to {
      opacity: 1;
    }
  }

  .gallery-label-frame {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .gallery-label {
    font-size: 1.2rem;
    font-weight: 500;
    color: #444;
    font-family: 'Glegoo', serif;
    opacity: 0;
    animation: fadeLabelIn 0.75s ease-out forwards;
    animation-delay: 600ms;
    white-space: nowrap;
  }

  .gallery-hr {
    display: inline-block;
    height: 1px;
    background-color: #ccc;
    flex-grow: 1;
    max-width: 300px;
    transform: scaleX(0);
    opacity: 0;
  }

  .gallery-hr-left {
    transform-origin: right;
    animation: lineGrowLeft 1.2s ease-out forwards;
    animation-delay: 1200ms;
  }

  .gallery-hr-right {
    transform-origin: left;
    animation: lineGrowRight 1.2s ease-out forwards;
    animation-delay: 1200ms;
  }

  @keyframes fadeLabelIn {
    to {
      opacity: 0.75;
    }
  }

  @keyframes lineGrowLeft {
    to {
      transform: scaleX(1);
      opacity: 1;
    }
  }

  @keyframes lineGrowRight {
    to {
      transform: scaleX(1);
      opacity: 1;
    }
  }

  .gallery-strip {
    display: flex;
    flex-wrap: nowrap;
    overflow-x: auto;
    gap: 1rem;
    justify-content: center;
    padding: 0 1rem;
  }

  .gallery-thumb {
    flex: 0 0 auto;
    width: 110px;
    height: 110px;
    border-radius: 6px;
    overflow: hidden;
    display: block;
    border: 2px solid #ccc;
    opacity: 0;
    transform: scale(0.95);
    animation: fadeInCenter 2s ease forwards;
    contain: content;
    will-change: transform, opacity;
  }

  .gallery-thumb img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    display: block;
  }

  .anim-left {
    animation-name: fadeSlideLeft;
  }

  .anim-right {
    animation-name: fadeSlideRight;
  }

  .anim-center {
    animation-name: fadeInCenter;
  }

  @keyframes fadeInCenter {
    to {
      opacity: 1;
      transform: scale(1);
    }
  }

  @keyframes fadeSlideLeft {
    0% {
      opacity: 0;
      transform: translateX(30px) scale(0.9);
    }
    100% {
      opacity: 1;
      transform: translateX(0) scale(1);
    }
  }

  @keyframes fadeSlideRight {
    0% {
      opacity: 0;
      transform: translateX(-30px) scale(0.9);
    }
    100% {
      opacity: 1;
      transform: translateX(0) scale(1);
    }
  }
</style>

<script>
  const checkAndHidePreview = () => {
    const chapter = document.getElementById("chapter-section");
    const preview = document.querySelector(".gallery-preview-strip");

    if (!chapter || !preview) return;

    const isVisible = chapter.classList.contains("section-visible");
    if (isVisible) {
      preview.style.transition = "opacity 0.5s ease";
      preview.style.opacity = "0";
      setTimeout(() => {
        preview.style.display = "none";
      }, 500);
    }
  };

  window.addEventListener("DOMContentLoaded", () => {
    checkAndHidePreview();

    const chapter = document.getElementById("chapter-section");
    if (!chapter) return;

    const observer = new MutationObserver(() => {
      checkAndHidePreview();
    });

    observer.observe(chapter, {
      attributes: true,
      attributeFilter: ["class"],
    });
  });
</script>
