// src/components/GalleryOrderer.jsx
import { useEffect, useMemo, useRef, useState } from "react";

/* ========= roots (add more here if needed) ========= */
const DATA_ROOTS = [
  "/src/data/Galleries",
  "/src/pages/Other",
];

/* ========= helpers ========= */
function downloadText(text, filename) {
  const blob = new Blob([text], { type: "text/plain;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
}

function pickImage(d = {}) {
  return (
    d.url ||
    d.src ||
    d.imageUrl ||
    d.cover ||
    d.hero?.src ||
    d.preview?.src ||
    d.images?.[0]?.url ||
    d.images?.[0]?.src ||
    ""
  );
}

function isGhost(d) { return d && d.id === "i-k4studios"; }
function isRealItem(d) { return d && !isGhost(d); }
function isHidden(d) { return d && String(d.visibility).toLowerCase() === "hidden"; }

/** Normalize item -> your JSON-style schema (quoted keys/values) */
function normalizeItem(raw) {
  const notes = raw.notes ?? raw.collectorNotes;
  const keywords = Array.isArray(raw.keywords)
    ? raw.keywords
    : Array.isArray(raw.tags)
    ? raw.tags
    : undefined;

  const out = {};
  if (raw.id != null) out.id = raw.id;
  if (raw.title != null) out.title = raw.title;
  if (raw.description != null) out.description = raw.description;
  if (raw.alt != null) out.alt = raw.alt;
  if (raw.src != null || raw.url != null) out.src = raw.src || raw.url;
  if (raw.buyLink != null) out.buyLink = raw.buyLink;
  if (keywords != null) out.keywords = keywords;
  if (raw.story != null) out.story = raw.story;
  if (notes != null) out.notes = notes;
  if (typeof raw.rating === "number") out.rating = raw.rating;
  if (Array.isArray(raw.galleries)) out.galleries = raw.galleries;
  if (raw.visibility != null) out.visibility = raw.visibility;
  if (typeof raw.sortOrder === "number") out.sortOrder = raw.sortOrder;
  return out;
}

function buildMjsJson(galleryData, exportName = "galleryData") {
  const json = JSON.stringify(galleryData.map(normalizeItem), null, 2);
  return `// Auto-generated by GalleryOrderer – review & commit
export const ${exportName} = ${json};
`;
}

/** Simple array reordering */
function arrayMove(arr, from, to) {
  if (from === to) return arr;
  const copy = arr.slice();
  const item = copy.splice(from, 1)[0];
  copy.splice(to, 0, item);
  return copy;
}

/* --- path helpers --- */
function normalizePath(p = "") { return p.replace(/\\/g, "/"); }

function stripRoot(p) {
  const n = normalizePath(p);
  for (const root of DATA_ROOTS) {
    const r = normalizePath(root) + "/";
    if (n.startsWith(r)) return n.slice(r.length);
  }
  return n.startsWith("/") ? n.slice(1) : n;
}

function prettyLabelFromPath(fullPath) {
  const rel = stripRoot(fullPath).replace(/\.mjs$/i, "");
  const segs = rel.split("/").map((s) =>
    s
      .replace(/-/g, " ")
      .replace(/\b\w/g, (m) => m.toUpperCase())
  );
  const rootHint =
    DATA_ROOTS.find((r) => normalizePath(fullPath).startsWith(normalizePath(r) + "/")) || "";
  const rootName = rootHint.split("/").pop(); // "Galleries" or "Other"
  return `[${rootName}] ${segs.join(" / ")}`;
}

/** Read ?dataset=... from URL (supports hash routers, too) */
function getDatasetFromUrl() {
  try {
    const search =
      window.location.search ||
      (window.location.hash.includes("?")
        ? window.location.hash.split("?")[1]
        : "");
    const params = new URLSearchParams(search);
    const raw = params.get("dataset");
    if (!raw) return "";
    const path = raw.startsWith("/") ? raw : `/${raw}`;
    const prefixed = path.startsWith("/src/") ? path : `/src/${path}`;
    return normalizePath(prefixed);
  } catch {
    return "";
  }
}

/* ========= Component (Grid-only, server save) ========= */
export default function GalleryOrderer({ datasetPath = "" }) {
  // discover datasets in BOTH roots
  const modules = useMemo(() => {
    const maps = [
      import.meta.glob("/src/data/Galleries/**/*.mjs", { eager: false, import: "galleryData" }),
      import.meta.glob("/src/pages/Other/**/*.mjs",     { eager: false, import: "galleryData" }),
    ];
    return Object.assign({}, ...maps);
  }, []);

  const options = useMemo(() => {
    return Object.keys(modules)
      .sort((a, b) => stripRoot(a).localeCompare(stripRoot(b)))
      .map((path) => ({ path, label: prettyLabelFromPath(path) }));
  }, [modules]);

  const [selectedPath, setSelectedPath] = useState("");
  const [backupData, setBackupData] = useState(null);   // full array as loaded (incl ghost)
  const [items, setItems] = useState([]);               // working order (ghost excluded)
  const [backupMade, setBackupMade] = useState(false);
  const [dirty, setDirty] = useState(false);
  const [lastAction, setLastAction] = useState(null);

  // UI state
  const [thumb, setThumb] = useState(180);
  const [showTitles, setShowTitles] = useState(false);
  const [filter, setFilter] = useState("");

  // undo stack for last move
  const lastMoveRef = useRef(null); // {from,to,snapshot}

  // Choose dataset: prefer prop → URL → first option
  useEffect(() => {
    if (!options.length) return;
    const fromProp = datasetPath ? (datasetPath.startsWith("/") ? datasetPath : `/${datasetPath}`) : "";
    const candidate = normalizePath(fromProp || getDatasetFromUrl() || options[0]?.path || "");
    setSelectedPath(options.some(o => o.path === candidate) ? candidate : (options[0]?.path || ""));
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [options.length, datasetPath]);

  // load dataset
  useEffect(() => {
    let cancelled = false;
    async function load() {
      if (!selectedPath) return;
      const mod = await modules[selectedPath]();
      const arr = Array.isArray(mod) ? mod : [];
      if (cancelled) return;

      setBackupData(arr);
      const vis = arr.filter(isRealItem);
      setItems(vis);
      setBackupMade(false);
      setDirty(false);
      setFilter("");
      setShowTitles(false);
      lastMoveRef.current = null;
      setLastAction(null);
    }
    load();
    return () => { cancelled = true; };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedPath]);

  function note(msg) {
    setLastAction(`${msg} — ${new Date().toLocaleTimeString()}`);
    window.setTimeout(() => setLastAction(null), 6000);
  }

  function ensureBackup() {
    if (!backupData) return;
    const ts = new Date().toISOString().replace(/[:.]/g, "-");
    downloadText(JSON.stringify(backupData, null, 2), `ORDER-BACKUP-${ts}.json`);
    downloadText(buildMjsJson(backupData, "galleryData"), `ORDER-BACKUP-${ts}.mjs`);
    setBackupMade(true);
    note("Backup created, ordering unlocked");
  }

  // filter
  const filtered = useMemo(() => {
    const base = items;
    const q = filter.trim().toLowerCase();
    if (!q) return base;
    return base.filter((d) =>
      [d.id, d.title, d.alt, d.description, d.story]
        .filter(Boolean)
        .some((v) => String(v).toLowerCase().includes(q))
    );
  }, [items, filter]);

  // indices map (id -> index in items)
  const idxById = useMemo(() => {
    const m = new Map();
    items.forEach((it, i) => m.set(it.id, i));
    return m;
  }, [items]);

  // drag handlers
  const dragFromIndex = useRef(null);

  function onDragStart(e, id) {
    if (!backupMade) { e.preventDefault(); return; }
    const idx = idxById.get(id);
    dragFromIndex.current = idx;
    e.dataTransfer.effectAllowed = "move";
    e.dataTransfer.setData("text/plain", id);
  }
  function onDragOver(e) { if (dragFromIndex.current == null) return; e.preventDefault(); }
  function onDrop(e, overId) {
    e.preventDefault();
    const from = dragFromIndex.current;
    const to = idxById.get(overId);
    dragFromIndex.current = null;
    if (from == null || to == null || from === to) return;
    lastMoveRef.current = { from, to, snapshot: items.slice() };
    setItems((arr) => arrayMove(arr, from, to));
    setDirty(true);
    note(`Moved #${from + 1} → #${to + 1}`);
  }

  function resetOrder() {
    if (!backupData) return;
    setItems(backupData.filter(isRealItem));
    setDirty(false);
    lastMoveRef.current = null;
    note("Order reset to loaded");
  }
  function undoLastMove() {
    const u = lastMoveRef.current;
    if (!u) return;
    setItems(u.snapshot);
    setDirty(true);
    lastMoveRef.current = null;
    note("Undid last move");
  }

  // toggle visibility for a given item id
  function toggleVisibility(id, wantHidden) {
    setItems(arr =>
      arr.map(it =>
        it.id === id
          ? (wantHidden ? { ...it, visibility: "hidden" } : (() => {
              const { visibility, ...rest } = it;
              return rest; // remove visibility to "show"
            })())
          : it
      )
    );
    setDirty(true);
  }

  // Build final array (ghost first, then reordered items), resequence sortOrder
  function buildFinalArray() {
    if (!backupData) return [];
    const ghosts = backupData.filter(isGhost);
    const vis = items.slice();
    vis.forEach((it, i) => { it.sortOrder = i; });
    return ghosts.concat(vis);
  }

  // Save to server (Netlify function) – send FULL ARRAY so visibility persists
  async function saveOrderHere() {
    if (!backupMade) { alert("Please create a backup first."); return; }
    if (!selectedPath) return;

    const datasetPathClean = selectedPath.replace(/^\//, ""); // strip leading slash
    const fullArray = buildFinalArray();

    try {
      const res = await fetch("/.netlify/functions/updateGalleryOrder", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          datasetPath: datasetPathClean, // e.g. src/data/.../Color.mjs OR src/pages/Other/...
          fullArray,                     // includes order + visibility + everything normalized on server
        }),
      });
      if (!res.ok) throw new Error(await res.text());
      note("Saved order/visibility in-place");
      setDirty(false);
    } catch (err) {
      alert("Server save failed. Falling back to download.\n\n" + err.message);
      const filename = datasetPathClean.split("/").pop() || "gallery.mjs";
      const text = buildMjsJson(fullArray, "galleryData");
      downloadText(text, filename);
      note(`Downloaded → ${filename}`);
      setDirty(false);
    }
  }

  // Optional manual download
  function saveAsDownload() {
    if (!selectedPath) return;
    const datasetPathClean = selectedPath.replace(/^\//, "");
    const filename = datasetPathClean.split("/").pop() || "gallery.mjs";
    const text = buildMjsJson(buildFinalArray(), "galleryData");
    downloadText(text, filename);
    note(`Downloaded → ${filename}`);
    setDirty(false);
  }

  const total = items.length;

  return (
    <div className="p-6 max-w-7xl mx-auto text-sm">
      <h1 className="text-2xl font-semibold mb-3">Gallery Orderer</h1>

      {/* dataset + backup gate */}
      <div className="flex flex-wrap items-center gap-2 mb-3">
        <select
          className="border rounded-md px-2 py-1 min-w-[22rem]"
          value={selectedPath}
          onChange={(e) => setSelectedPath(e.target.value)}
        >
          {options.map((o) => (
            <option key={o.path} value={o.path}>
              {o.label}
            </option>
          ))}
        </select>

        {!backupMade ? (
          <button onClick={ensureBackup} className="px-3 py-1 rounded-md border bg-white">
            1) Make Data Backup
          </button>
        ) : (
          <span className="text-green-700">✅ Backup created — ordering unlocked</span>
        )}

        <div className="ml-auto flex items-center gap-2">
          <input
            value={filter}
            onChange={(e) => setFilter(e.target.value)}
            placeholder="Search id/title/text…"
            className="w-72 border rounded-md px-2 py-1"
          />
          <label className="flex items-center gap-1 px-2 py-1 border rounded-md">
            <input
              type="checkbox"
              checked={showTitles}
              onChange={() => setShowTitles((v) => !v)}
            />
            Titles
          </label>
          <div className="flex items-center gap-2 border rounded-md px-2 py-1">
            <span className="opacity-70">Thumb</span>
            <input
              type="range"
              min={90}
              max={320}
              value={thumb}
              onChange={(e) => setThumb(Number(e.target.value))}
            />
          </div>
        </div>
      </div>

      {/* actions */}
      <div className="mb-3 flex flex-wrap items-center gap-2">
        {dirty && <span className="text-red-600 font-medium">Unsaved changes</span>}

        <button onClick={saveOrderHere} className="px-3 py-1 rounded-md border">
          Save Here (server)
        </button>
        <button onClick={saveAsDownload} className="px-3 py-1 rounded-md border">
          Download .mjs
        </button>
        <button onClick={resetOrder} className="px-3 py-1 rounded-md border">
          Reset To Loaded
        </button>
        <button onClick={undoLastMove} className="px-3 py-1 rounded-md border">
          Undo Last Move
        </button>

        <span className="ml-auto opacity-70">{filtered.length}/{total}</span>

        {lastAction && (
          <span className="ml-2 text-xs bg-green-50 border border-green-200 text-green-800 px-2 py-1 rounded-md">
            {lastAction}
          </span>
        )}
      </div>

      {/* grid DnD */}
      <div
        className={`${!backupMade ? "pointer-events-none opacity-60" : ""}`}
        style={{
          display: "grid",
          gap: "0.75rem",
          gridTemplateColumns: `repeat(auto-fill, minmax(${thumb}px, 1fr))`,
        }}
      >
        {filtered.map((it) => {
          const img = pickImage(it);
          const i = items.findIndex((x) => x.id === it.id);
          const hidden = isHidden(it);
          return (
            <div
              key={it.id}
              draggable
              onDragStart={(e) => onDragStart(e, it.id)}
              onDragOver={onDragOver}
              onDrop={(e) => onDrop(e, it.id)}
              className="relative border rounded-md bg-white overflow-hidden shadow-sm"
              title={`#${i + 1} – ${it.id}${hidden ? " (hidden)" : ""}`}
              style={hidden ? { opacity: 0.5, filter: "grayscale(0.35)" } : undefined}
            >
              {/* S/H tiny toggle */}
              <div className="absolute top-1 right-1 z-10 flex gap-1">
                <button
                  type="button"
                  className={`px-1.5 h-6 text-[11px] rounded ${hidden ? "bg-white border border-gray-300 text-gray-500" : "bg-green-600 text-white border border-green-700"}`}
                  title="Show"
                  onClick={(e) => { e.preventDefault(); e.stopPropagation(); toggleVisibility(it.id, false); }}
                >
                  S
                </button>
                <button
                  type="button"
                  className={`px-1.5 h-6 text-[11px] rounded ${hidden ? "bg-red-600 text-white border border-red-700" : "bg-white border border-gray-300 text-gray-500"}`}
                  title="Hide"
                  onClick={(e) => { e.preventDefault(); e.stopPropagation(); toggleVisibility(it.id, true); }}
                >
                  H
                </button>
              </div>

              {img ? (
                <img
                  src={img}
                  alt=""
                  className="block w-full"
                  style={{ height: thumb, objectFit: "cover" }}
                />
              ) : (
                <div className="w-full grid place-items-center" style={{ height: thumb }}>
                  No image
                </div>
              )}

              {/* footer */}
              <div className="flex items-center justify-between px-2 py-1 text-xs border-t bg-gray-50">
                <span className="font-medium">#{i + 1}</span>
                {showTitles ? (
                  <span className="truncate ml-2" title={it.title || ""}>
                    {it.title || it.id}
                  </span>
                ) : (
                  <span className="opacity-60 truncate ml-2">{it.id}</span>
                )}
                {hidden && (
                  <span className="ml-2 inline-flex items-center px-1.5 py-[1px] text-[10px] rounded bg-red-100 text-red-700 border border-red-200">
                    Hidden
                  </span>
                )}
              </div>
            </div>
          );
        })}
      </div>

      <div className="mt-4 text-xs opacity-70">
        Drag to reorder. Use the S/H buttons to show/hide items. Click <strong>Save Here (server)</strong> to overwrite
        the dataset file via Netlify (order + visibility). If the server save fails, use <strong>Download .mjs</strong>
        as a fallback.
      </div>
    </div>
  );
}
