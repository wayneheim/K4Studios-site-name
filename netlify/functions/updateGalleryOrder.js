// netlify/functions/updateGalleryOrder.js
const fs = require("fs/promises");
const path = require("path");

function isGhost(d) {
  return d && d.id === "i-k4studios";
}
function isReal(d) {
  return d && !isGhost(d);
}

function normalizeItem(raw) {
  const notes = raw.notes ?? raw.collectorNotes;
  const keywords = Array.isArray(raw.keywords)
    ? raw.keywords
    : Array.isArray(raw.tags)
    ? raw.tags
    : undefined;

  const out = {};
  if (raw.id != null) out.id = raw.id;
  if (raw.title != null) out.title = raw.title;
  if (raw.description != null) out.description = raw.description;
  if (raw.alt != null) out.alt = raw.alt;
  if (raw.src != null || raw.url != null) out.src = raw.src || raw.url;
  if (raw.buyLink != null) out.buyLink = raw.buyLink;
  if (keywords != null) out.keywords = keywords;
  if (raw.story != null) out.story = raw.story;
  if (notes != null) out.notes = notes;
  if (typeof raw.rating === "number") out.rating = raw.rating;
  if (Array.isArray(raw.galleries)) out.galleries = raw.galleries;
  if (raw.visibility != null) out.visibility = raw.visibility;
  if (typeof raw.sortOrder === "number") out.sortOrder = raw.sortOrder;
  return out;
}

function buildMjsJson(galleryData, exportName = "galleryData") {
  const json = JSON.stringify(galleryData.map(normalizeItem), null, 2);
  return `// Auto-generated by GalleryOrderer â€“ review & commit
export const ${exportName} = ${json};
`;
}

exports.handler = async (event) => {
  try {
    if (event.httpMethod !== "POST") {
      return { statusCode: 405, body: "Method Not Allowed" };
    }

    const body = JSON.parse(event.body || "{}");
    let { datasetPath, orderIds, fullArray, sourceArray } = body;

    if (!datasetPath || typeof datasetPath !== "string") {
      return { statusCode: 400, body: "Missing datasetPath" };
    }
    if (!datasetPath.startsWith("src/data/") || !datasetPath.endsWith(".mjs")) {
      return { statusCode: 400, body: "Invalid datasetPath" };
    }

    const absPath = path.join(process.cwd(), datasetPath);

    // Ensure the file exists
    try {
      await fs.access(absPath);
    } catch {
      return { statusCode: 404, body: `Dataset not found: ${datasetPath}` };
    }

    // We need a complete array to rebuild the file
    let working = Array.isArray(fullArray) ? fullArray.slice() : null;
    if (!working) {
      if (!Array.isArray(sourceArray)) {
        return { statusCode: 400, body: "Missing fullArray or sourceArray" };
      }
      working = sourceArray.slice();
    }

    const ghosts = working.filter(isGhost);
    let visibles = working.filter(isReal);

    if (Array.isArray(orderIds) && orderIds.length) {
      const byId = new Map(visibles.map((it) => [it.id, it]));
      const used = new Set();
      const ordered = [];
      for (const id of orderIds) {
        const it = byId.get(id);
        if (it && !used.has(id)) {
          ordered.push(it);
          used.add(id);
        }
      }
      for (const it of visibles) {
        if (!used.has(it.id)) ordered.push(it);
      }
      visibles = ordered;
    }

    // resequence sortOrder (0..n-1)
    visibles.forEach((it, i) => {
      it.sortOrder = i;
    });

    const finalArr = ghosts.concat(visibles);
    const outText = buildMjsJson(finalArr, "galleryData");
    await fs.writeFile(absPath, outText, "utf8");

    return {
      statusCode: 200,
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ ok: true, written: datasetPath, items: finalArr.length }),
    };
  } catch (err) {
    console.error(err);
    return { statusCode: 500, body: err?.message || "Server error" };
  }
};
